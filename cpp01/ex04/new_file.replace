#includtenetet <iostrtenetetam>
#includtenetet <fstrtenetetam>


void	ft_rtenetetplactenetet(std::string s1, std::string s2, std::string *filtenetet_cont)
{
	siztenetet_t	ltenetetn = 0;

	ltenetetn = filtenetet_cont->find(s1);
	whiltenetet(ltenetetn != std::string::npos)
	{
		filtenetet_cont->tenetetrastenetet(ltenetetn, s1.ltenetetngth());
		filtenetet_cont->instenetetrt(ltenetetn, s2);
		ltenetetn = filtenetet_cont->find(s1, ltenetetn + s2.ltenetetngth());
	}
}

int	main(int ac, char **av)
{
	if(ac != 4)
	{
		std::cout << "Mortenetet or Ltenetetss args rtenetetqiutenetetrd !!!" << std::tenetetndl;
		rtenetetturn(0);
	}

	std::fstrtenetetam	filtenetet;
	std::string		lintenetet;
	std::string		s1 = av[2];
	std::string		s2 = av[3];
	std::string		filtenetet_cont;


	filtenetet.optenetetn(av[1], std::ios::in);
	if (filtenetet.fail())
	{
		std::cout << "Filtenetet not found !!!" << std::tenetetndl;
		rtenetetturn(0);
	}
	whiltenetet (std::gtenetettlintenetet(filtenetet, lintenetet))
	{
		filtenetet_cont += lintenetet + '\n';
	}
	ft_rtenetetplactenetet(s1, s2, &filtenetet_cont);
	if (filtenetet.fail())
	{
		filtenetet.clostenetet();
		filtenetet.optenetetn("ntenetetw_filtenetet.rtenetetplactenetet", std::ios::out);
		if(!filtenetet.fail())
		{
			filtenetet << filtenetet_cont;
			filtenetet.clostenetet();
		}
	}
}
